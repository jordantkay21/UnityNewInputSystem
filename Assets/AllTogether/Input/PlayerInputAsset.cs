//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/AllTogether/Input/PlayerInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAsset"",
    ""maps"": [
        {
            ""name"": ""ColorChange"",
            ""id"": ""f2a5f35b-38dc-4b7d-806e-797f03b77e4c"",
            ""actions"": [
                {
                    ""name"": ""ChangeColor"",
                    ""type"": ""Button"",
                    ""id"": ""569337a8-80bf-48f4-a022-e426d62305a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""991aeaae-cca7-41df-8729-8c11114e6579"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkingState"",
                    ""type"": ""Button"",
                    ""id"": ""ab69e20a-4688-497d-b397-e4c1d76234b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a79453e1-1125-488b-b476-090ae1942048"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""839a151f-f396-4fed-b6bf-e0cc5bba0f64"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a3c8f768-9b67-4a04-b455-e2072249b8db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ab9ed268-82c2-4935-a4de-f8fc09409fb2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""edbfabe1-8b61-441d-8355-e7c956c1e873"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Walking"",
            ""id"": ""1c72bec8-07f0-4ec8-a1a7-a0d2fe33eb5b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1cdda9db-ced3-4a6d-bab8-a550aff5540b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ColorChangeState"",
                    ""type"": ""Button"",
                    ""id"": ""5a890fb4-2381-46d0-8abe-d67adf35990b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""676b24e4-bc3c-4dbd-93c9-339ae86483d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8bf2d779-ec14-4bc7-82cf-3ebbcee92a6d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e781c051-5cc7-4d16-816d-6fb094b78f80"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0184762-6c34-4ea9-a3e5-b95194311802"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""28be35e7-91d1-439f-a94a-48781a9fba1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f627eb88-91af-4f6f-b6ea-562e4f0652ba"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ColorChangeState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ColorChange
        m_ColorChange = asset.FindActionMap("ColorChange", throwIfNotFound: true);
        m_ColorChange_ChangeColor = m_ColorChange.FindAction("ChangeColor", throwIfNotFound: true);
        m_ColorChange_Rotation = m_ColorChange.FindAction("Rotation", throwIfNotFound: true);
        m_ColorChange_WalkingState = m_ColorChange.FindAction("WalkingState", throwIfNotFound: true);
        // Walking
        m_Walking = asset.FindActionMap("Walking", throwIfNotFound: true);
        m_Walking_Movement = m_Walking.FindAction("Movement", throwIfNotFound: true);
        m_Walking_ColorChangeState = m_Walking.FindAction("ColorChangeState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ColorChange
    private readonly InputActionMap m_ColorChange;
    private IColorChangeActions m_ColorChangeActionsCallbackInterface;
    private readonly InputAction m_ColorChange_ChangeColor;
    private readonly InputAction m_ColorChange_Rotation;
    private readonly InputAction m_ColorChange_WalkingState;
    public struct ColorChangeActions
    {
        private @PlayerInputAsset m_Wrapper;
        public ColorChangeActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColor => m_Wrapper.m_ColorChange_ChangeColor;
        public InputAction @Rotation => m_Wrapper.m_ColorChange_Rotation;
        public InputAction @WalkingState => m_Wrapper.m_ColorChange_WalkingState;
        public InputActionMap Get() { return m_Wrapper.m_ColorChange; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ColorChangeActions set) { return set.Get(); }
        public void SetCallbacks(IColorChangeActions instance)
        {
            if (m_Wrapper.m_ColorChangeActionsCallbackInterface != null)
            {
                @ChangeColor.started -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.performed -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.canceled -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnChangeColor;
                @Rotation.started -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnRotation;
                @WalkingState.started -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnWalkingState;
                @WalkingState.performed -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnWalkingState;
                @WalkingState.canceled -= m_Wrapper.m_ColorChangeActionsCallbackInterface.OnWalkingState;
            }
            m_Wrapper.m_ColorChangeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColor.started += instance.OnChangeColor;
                @ChangeColor.performed += instance.OnChangeColor;
                @ChangeColor.canceled += instance.OnChangeColor;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @WalkingState.started += instance.OnWalkingState;
                @WalkingState.performed += instance.OnWalkingState;
                @WalkingState.canceled += instance.OnWalkingState;
            }
        }
    }
    public ColorChangeActions @ColorChange => new ColorChangeActions(this);

    // Walking
    private readonly InputActionMap m_Walking;
    private IWalkingActions m_WalkingActionsCallbackInterface;
    private readonly InputAction m_Walking_Movement;
    private readonly InputAction m_Walking_ColorChangeState;
    public struct WalkingActions
    {
        private @PlayerInputAsset m_Wrapper;
        public WalkingActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Walking_Movement;
        public InputAction @ColorChangeState => m_Wrapper.m_Walking_ColorChangeState;
        public InputActionMap Get() { return m_Wrapper.m_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void SetCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnMovement;
                @ColorChangeState.started -= m_Wrapper.m_WalkingActionsCallbackInterface.OnColorChangeState;
                @ColorChangeState.performed -= m_Wrapper.m_WalkingActionsCallbackInterface.OnColorChangeState;
                @ColorChangeState.canceled -= m_Wrapper.m_WalkingActionsCallbackInterface.OnColorChangeState;
            }
            m_Wrapper.m_WalkingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ColorChangeState.started += instance.OnColorChangeState;
                @ColorChangeState.performed += instance.OnColorChangeState;
                @ColorChangeState.canceled += instance.OnColorChangeState;
            }
        }
    }
    public WalkingActions @Walking => new WalkingActions(this);
    public interface IColorChangeActions
    {
        void OnChangeColor(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnWalkingState(InputAction.CallbackContext context);
    }
    public interface IWalkingActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnColorChangeState(InputAction.CallbackContext context);
    }
}
